# RTS HW2 planning
_Due: 3/29 (We)_

Read paper:
I. Hong, M. Potkonjak, and M. B. Srivastava, “On-line scheduling of hard real-time tasks on 
variable voltage processor,” Proc. Computer-Aided Design (ICCAD), pages 653–656, November 1998.

## To do
- Utilization
	- Return max and argmax together?
- Acceptance test
- Speed adjust
- Remaining computation time: add context switching time
	- From outgoing and incoming task
- Run tasks from schedule
	- Arrive tasks
	- Activate acceptance test and speed adjust
	- Update remaining comp time (based on clock speed)
	- Complete tasks and shift to next task
- Read input and print output

## Acceptance test
- Reject tasks that cannot be feasibly scheduled.

### Setup
- t = time of acceptance test
- S = stream of tasks that have been accepted but uncompleted at time t
- The tasks in S are indexed in ascending order of their deadlines.
- Store in a priority queue
- RC(Si, t) = the remaining computation time of S_i at the highest speed at time t

### Formula
- U_j(t) = sum[i=1,j](RC(S_i, t))/(D_j - t)
	Utilization of task j = the ratio of the sum of remaining computation times up to
	task j and the time left until the deadline of task j
- U(t) = max(U_j(t))
	Max utilization is the max of the utilizations for all tasks in the system.
- U(t) > 1 means infeasible

### Applying the acceptance test
- When a new task arrives.
- Include it temporarily in the system.
- Update RC(S_1, t): S_1 = the currently running task.
- Recompute U_j(t) where needed
- Compute U(t). If result > 1, reject new task.

## Schedule accepted tasks
- Use EDF scheduler!
- Decide at two kinds of moments:
- New task accepted (don't move if task rejected)
- Running task finishes
- Only update the voltage system when new task arrives.
- Use the existing voltage system when running task finishes.

## Adjust execution speed to save energy
- Slow down tasks with extra time
- Input: t = current time, S = set of tasks, including new task, sorted by EDF
- While S is not empty:
	- Compute U_j(t) <as in acceptance test above> for all tasks S_j
	- Compute U(t) <as above>
	- Compute argmax(U_j(t)) to find an indexed task S_k with the max utilization
		- If ties, use the latest task in the sorting order (latest deadline!)
	- Consider the tasks whose deadlines are >= t and <= the deadline of S_k.
		- Adjust the computation times by using the current U(t) ratio as the
			processor speed
		- Mark these tasks as done by removing from S
	- Advance t to = D_k = the deadline of S_k
- Output: adjusted processor speeds for all tasks in the system

## Respect context switching times (implement this after basic implementation!)
- Whenever changing from one task to another
- When preempt or when complete, both need context switch
- Paper does not address this issue!
- Add the context switch time to the computation time

## Read input file, write output file
